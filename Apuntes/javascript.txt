<script src="myScript.js"></script>  //script en la misma carpeta

Keyword 		Description
break 			Terminates a switch or a loop
continue 		Jumps out of a loop and starts at the top
debugger 		Stops the execution of JavaScript, and calls (if available) the debugging function
do ... while 	Executes a block of statements, and repeats the block, while a condition is true
for 			Marks a block of statements to be executed, as long as a condition is true
function 		Declares a function
if ... else 	Marks a block of statements to be executed, depending on a condition
return 			Exits a function
switch 			Marks a block of statements to be executed, depending on different cases
try ... catch 	Implements error handling to a block of statements
var 			Declares a variable

+ 	Addition;- 	Subtraction;* 	Multiplication;/ 	Division;% 	Modulus;++ 	Increment; -- 	Decrement
** 	Exponentiation

== 	equal to
=== 	equal value and equal type
!= 	not equal
!== 	not equal value or not equal type
> 	greater than
< 	less than
>= 	greater than or equal to
<= 	less than or equal to
? 	ternary operator
Bitwise Operators:
Operator 	Description 			Example 	Same as 		Result 	Decimal
& 			AND 					5 & 1 		0101 & 0001 	0001 	 1
| 			OR 						5 | 1 		0101 | 0001 	0101 	 5
~ 			NOT 					~ 5 	 	~0101 			1010 	 10
^ 			XOR 					5 ^ 1 		0101 ^ 0001 	0100 	 4
<< 			Zero fill left shift 	5 << 1 		0101 << 1 		1010 	 10
>> 			Signed right shift 		5 >> 1 		0101 >> 1 		0010 	  2
>>> 		Zero fill right shift 	5 >>> 1 	0101 >>> 1 		0010 	  2
typeof 	Returns the type of a variable
instanceof 	Returns true if an object is an instance of an object type
var y = 123e5;      // 12300000
Array: var cars = ["Saab", "Volvo", "BMW"];
Object: var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
	para acceder: objectName.propertyName or objectName["propertyName"]

typeof [1,2,3,4]             // Returns "object" (not "array")
typeof {name:'John', age:34} // Returns "object"
typeof function myFunc(){}   // Returns "function" 
	undefined, null, 

Common HTML Events:
	Event 			Description
	onchange 		An HTML element has been changed
	onclick 		The user clicks an HTML element
	onmouseover 	The user moves the mouse over an HTML element
	onmouseout 		The user moves the mouse away from an HTML element
	onkeydown 		The user pushes a keyboard key
	onload 			The browser has finished loading the page

number:.toExponential(dec) .toFixed(dec) .toPrecision(numDigitos) .valueOf();
Math: .PI .round(n)	.pow(8, 2);//8^2 .sqrt(64); .abs(-4.7); .ceil(4.4);//5 .floor(4.7);//4 .random();
	Math.floor(Math.random() * 100) + 1; // returns a number between 1 and 100 
------------------------------------------------------------------------------------------------------------------------------
Date();	
	A JavaScript date can be written as a string: Thu May 18 2017 10:36:36 GMT+0200
	or as a number: 1495096596649
	new Date()
	new Date(milliseconds) //01 January 1970 00:00:00 UTC + The number is specified in milliseconds
	new Date(dateString) //"October 13, 2014 11:13:00" 
		ISO Date 	"2015" (The International Standard) "2015-03-25T12:00:00Z" con el mes dia y hora "...-06:30" en vez de z
		Short Date 	"03/25/2015"
		Long Date 	"Mar 25 2015" or "25 Mar 2015"
		Full Date 	"Wednesday March 25 2015"
	new Date(year, month(0-11), day, hours, minutes, seconds, milliseconds)
	.toUTCString(); .toDateString(); .toString();
	getUTC/set/getDate() 			Get the day as a number (1-31)
	getUTC/getDay() 			Get the weekday as a number (0-6)
	getUTC/set/getFullYear() 		Get the four digit year (yyyy)
	getUTC/set/getHours() 			Get the hour (0-23)
	getUTC/set/getMilliseconds() 	Get the milliseconds (0-999)
	getUTC/set/getMinutes() 		Get the minutes (0-59)
	getUTC/set/getMonth() 			Get the month (0-11)
	getUTC/setgetSeconds() 		Get the seconds (0-59)
	getUTC/set/getTime() 			Get the time (milliseconds since January 1, 1970)
	.Date.parse() convertir string en milisegundos
	
------------------------------------------------------------------------------------------------------------------------------
Array:
****Property********Description********************************************************
	constructor 	Returns the function that created the Array object's prototype
	length 			Sets or returns the number of elements in an array
	prototype 		Allows you to add properties and methods to an Array object	
	
****Method**********Description********************************************************
	concat(arrays) 	Joins two or more arrays, and returns a copy of the joined arrays
	copyWithin() 	Copies array elements within the array, to and from specified positions
	every() 		Checks if every element in an array pass a test
	fill() 			Fill the elements in an array with a static value
	filter() 		Creates a new array with every element in an array that pass a test
	find() 			Returns the value of the first element in an array that pass a test
	findIndex() 	Returns the index of the first element in an array that pass a test
	forEach() 		Calls a function for each array element
	indexOf() 		Search the array for an element and returns its position
	isArray() 		Checks whether an object is an array
	join(String) 	Joins all elements of an array into a string
	lastIndexOf() 	Search the array for an element, starting at the end, and returns its position
	map() 			Creates a new array with the result of calling a function for each array element
	pop() 			Removes the last element of an array, and returns that element
	push(e) 		Adds new elements to the end of an array, and returns the new length
	reduce() 		Reduce the values of an array to a single value (going left-to-right)
	reduceRight() 	Reduce the values of an array to a single value (going right-to-left)
	reverse() 		Reverses the order of the elements in an array
	shift() 		Removes the first element of an array, and returns that element
	slice(ini,fin) 	Selects a part of an array, and returns the new array. ini no incluido
	some() 			Checks if any of the elements in an array pass a test
	sort() 			Sorts the elements of an array as string, for numbers: .sort(function(a, b){return a - b})//<0 =0 >0
	splice() 		Adds/Removes elements from an array (2(ini), 0(remove 0 elements), "e1ToAdd", "e2",...);/(0, 1); 
	toString() 		Converts an array to a string, and returns the result
	unshift() 		Adds new elements to the beginning of an array, and returns the new length
	valueOf() 		Returns the primitive value of an array
------------------------------------------------------------------------------------------------------------------------------
list: {
    ...
	list2:{
	...	
    break listx;
	}	
	...
}	
if(x == "") throw "is empty";

"use strict"; // La directiva "use strict" sólo se reconoce al principio de un script o una función.
...//no se puede usar variables sin declarar ni borrar variables/objetos: delete x;
	Deleting a function is not allowed.
	Duplicating a parameter name is not allowed:
	Octal numeric literals are not allowed:
	Escape characters are not allowed:
	Writing to a read-only property is not allowed:
	Writing to a get-only property is not allowed:
	Deleting an undeletable property is not allowed:
	The with statement is not allowed:
	
<script> //JSON
var text = '{"employees":[' +
'{"firstName":"John","lastName":"Doe" },' +
'{"firstName":"Anna","lastName":"Smith" },' +
'{"firstName":"Peter","lastName":"Jones" }]}';
...
obj = JSON.parse(text);
document.getElementById("demo").innerHTML =
obj.employees[1].firstName + " " + obj.employees[1].lastName;
</script>

document.forms["myForm"]["nameOfAInputInform"].value;

var inpObj = document.getElementById("id1");
if (inpObj.checkValidity() == false) {
	document.getElementById("demo").innerHTML = inpObj.validationMessage;
}
	validity 			Contains boolean properties related to the validity of an input element.
	validationMessage 	Contains the message a browser will display when the validity is false.
	willValidate 		Indicates if an input element will be validated.
	Property 			Description
	customError 		Set to true, if a custom validity message is set.
	patternMismatch 	Set to true, if an element's value does not match its pattern attribute.
	rangeOverflow 		Set to true, if an element's value is greater than its max attribute.
	rangeUnderflow 		Set to true, if an element's value is less than its min attribute.
	stepMismatch 		Set to true, if an element's value is invalid per its step attribute.
	tooLong 			Set to true, if an element's value exceeds its maxLength attribute.
	typeMismatch 		Set to true, if an element's value is invalid per its type attribute.
	valueMissing 		Set to true, if an element (with a required attribute) has no value.
	valid 				Set to true, if an element's value is valid.
	<input id="id1" type="number" max/min="100"> .validity.rangeOverflow .rangeUnderflow //Esta encima/por debajo del max/min
------------------------------------------------------------------------------------------------------------------------------
Object:
	Booleans, Numbers, Strings can be objects (if defined with the new keyword)
	Dates, Maths, regularExp, array, functions, objects are always objects
	objectName.property, objectName["property"], objectName[expression] 
	var person = {fname:"John", lname:"Doe", age:25,
		fullName : function() {
			return this.firstName + " " + this.lastName;
		}
	};
	for (x in person) {
		txt += person[x];//John Doe 25
	} 	
	add new properties: person.nationality = "English";  
		Will only add to person object, to add properties to a propotype we need to change the constructor or Person.prototype.nationality = "English";
		*Only modify your own prototypes. Never modify the prototypes of standard JavaScript objects.
	deletes a property: delete person.age; does not delete inherited properties,
	objectName.function without (), it will return the function definition
	Prototype: The standard way to create an object prototype is to use an object constructor function: 
		function Person(first, last, age, eyecolor) {this.f=first ...}
------------------------------------------------------------------------------------------------------------------------------
Functions:
	var myFunction = new Function("a", "b", "return a * b"); o como siempre function (a, b) {return a * b};	
	(function () {
		var x = "Hello!!";      // I will invoke myself
	})(); //anonymous self-invoking function (function without name).
	The arguments.length property returns the number of arguments received when the function was invoked
	JavaScript function definitions do not specify data types for parameters.
	JavaScript functions do not perform type checking on the passed arguments.
	JavaScript functions do not check the number of arguments received.  
		the missing values(less than declared) are set to: undefined
		if is more theses can be reached(alcanzar) using the arguments object. arguments[i]
	The function above automatically becomes a window function. myFunction() and window.myFunction() is the same function:
	With call() or apply() you can set the value of this, and invoke a function as a new method of an existing object.
		myObject = myFunction.call(myObject, 10, 2);
		myArray = [10, 2]; myObject = myFunction.apply(myObject, myArray);  
	Se puede hacer funciones anidadas(Nested) para tener una variable "global" 
	var add = (function () {
		var counter = 0;
		return function () {return counter += 1;}
	})();
	add();
	add();
	add(); //counter=3 y es privado
------------------------------------------------------------------------------------------------------------------------------
JavaScript HTML DOM: The DOM is a W3C (World Wide Web Consortium) standard.  
	The HTML DOM is a standard for how to get, change, add, or delete HTML elements.
	document.getElementById(id) 	Find an element by element id
	document.getElementsByTagName(name) 	Find elements by tag name
	document.getElementsByClassName(name) 	Find elements by class name //does not work in Internet Explorer 8 and earlier versions.
	
	Method 									Description
	element.innerHTML =  new html content 	Change the inner HTML of an element
	element.attribute = new value 			Change the attribute value of an HTML element 
		.src ...; .style.property->color,width, lenght, backgroud, position... 
	element.setAttribute(attribute, value) 	Change the attribute value of an HTML element
	element.style.property = new style 		Change the style of an HTML element
	
	Method 									Description
	document.createElement(element) 		Create an HTML element
	document.removeChild(element) 			Remove an HTML element
	document.appendChild(element) 			Add an HTML element
	document.replaceChild(element) 			Replace an HTML element
	document.write(text) 					Write into the HTML output stream
	
	document.getElementById(id).onclick = function(){code}
	
	Property 					Description 											DOM
	document.anchors 			Returns all <a> elements that have a name attribute 	1
	document.applets 			Returns all <applet> elements (Deprecated in HTML5) 	1
	document.baseURI 			Returns the absolute base URI of the document 			3
	document.body 				Returns the <body> element 								1
	document.cookie 			Returns the document's cookie 							1
	document.doctype 			Returns the document's doctype 							3
	document.documentElement 	Returns the <html> element 								3
	document.documentMode 		Returns the mode used by the browser 					3
	document.documentURI 		Returns the URI of the document 						3
	document.domain 			Returns the domain name of the document server 			1
	document.domConfig 			Obsolete. Returns the DOM configuration 				3
	document.embeds 			Returns all <embed> elements 							3
	document.forms 				Returns all <form> elements 							1
	document.head 				Returns the <head> element 								3
	document.images 			Returns all <img> elements 								1
	document.implementation 	Returns the DOM implementation 							3
	document.inputEncoding 		Returns the document's encoding (character set) 		3
	document.lastModified 		Returns the date and time the document was updated 		3
	document.links 				Returns all <area> and <a> elements that have a href attribute 	1
	document.readyState 		Returns the (loading) status of the document 			3
	document.referrer 			Returns the URI of the referrer (the linking document) 	1
	document.scripts 			Returns all <script> elements 							3
	document.strictErrorChecking 	Returns if error checking is enforced 				3
	document.title 				Returns the <title> element 							1
	document.URL 				Returns the complete URL of the document 				1

	This example finds the element with id="main", and then finds all <p> elements inside "main":
		var x = document.getElementById("main");
		var y = x.getElementsByTagName("p");
	This example returns a list of all <p> elements with class="intro".
		var x = document.querySelectorAll("p.intro"); 	
	var x = document.forms["frm1"]; //A form with id frm1
	***Animación***
		var id = setInterval(frame, 5); //frame is a function and 5 the time to repeat
		clearInterval(id); //To stop
	***Events***
		element.addEventListener(event, function, useCapture); 
		//useCapture(optional):Bubbling(false,default) or Capturing(true): 
			In bubbling the inner most element's event is handled first and then the outer, Capturing al réves.
		//*you don't use the "on" prefix for the event; use "click" instead of "onclick".
		mouseover, mouseout, mousemove
	***Navigation***		
		.parentNode
		.childNodes[nodenumber] //It is not an array! you cannot use Array Methods, like valueOf() or join() on the node list.
		.firstChild
		.lastChild
		.nextSibling
		.previousSibling
	***Creación***
		var para = document.createElement("p");
		var node = document.createTextNode("This is new.");
		para.appendChild(node);//<p>This is new.</p>
		parent.insertBefore(child, sibling)
		parent.appendChild(child);
		parent.removeChild(child); //But because of poor browser support, you should not use it. implemented in the DOM 4 specification.
		parent.replaceChild(newChild, oldChild);
	

	
var x = 0.1;
var y = 0.2;
var z = x + y            // the result in z will not be 0.3 because are floats
var z = (x * 10 + y * 10) / 10;       // z will be 0.3 	
It is a default JavaScript behavior to close a statement automatically at the end of a line.
NaN - Not a Number	 var x = 100 / "10";     // x will be 10 
objects cannot be compared 	
number: Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.	
Accessing a function without () will return the function definition instead of(en vez de) the function result
If you re-declare a JavaScript variable, it will not lose its value.	
Hyphens(guiones) are not allowed in JavaScript.	It is reserved for subtractions
Reduce DOM Access: obj = document.getElementById("demo"); y usar obj 
Variables created without the keyword var, are always global, even if they are created inside a function.




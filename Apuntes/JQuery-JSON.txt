Aux JQuery
	<script src="https://code.jquery.com/jquery-2.2.2.min.js"></script>	src="jquery-3.1.1.min.js"
	o descargarlo: http://jquery.com
	
	$('#idElemento').hide();						xxx.html("nuevo texto de xxx");
	$('.classElemento').							xxx.val("nuevo valor de xxx");
	$('[regulrExp]').								xxx.css("border","2px solid red");
	$(function() {…}).								xxx.fadeOut("yyyy"); Tiempo en ms para desaparición
	$('*'): seleccionar todos						xxx.fadeIn("yyyy"); Tiempo en ms para aparición
	$('etiqueta.clase#identificador')				xxx.slideUp("yyyy"); Tiempo en ms para Desaparece como persiana
	Filtros de índice:								xxx.slideDown("yyyy"); Tiempo en ms para Desaparece como persiana
		$("selector:first") 
		$("selector:last") 
		$("selector:eq(i)")
		$("selector:gt(i)")
		$("selector:lt(i)")
	Filtros de condición:
		$("selector:visible")
		$("selector:hidden")
		$("selector:disabled")
		$("selector:enabled")
		$("selector:checked")
		$("selector:selected")
	Filtros de contenido:
		$("selector:content('text')")
		$("selector:empty")
		$("selector:has(selector)")
	Filtros de formulario:
		$("selector:input")
		$("selector:text")
		$("selector:radio")
		$("selector:checkbox")
		$("selector:submit")
		$("selector:button")
	Filtros de atributo
		$("selector[attributo]")
		$("selector[attributo=valor]")
		$("selector[attributo!=valor]")
	Recorrido del DOM
		$("selector").length
		$("selector").size()
		$("selector-1").find('selector-2') Devuelve los hijos seleccionados por selector-2.		
	Consultar/modificar elementos HTML
		$('selector').append('htmlString') P.ej. $('ul').append($('<li class=\'nuevo\'>Otro elemento</li>'));
		$('htmlString').insertBefore('selector'),.insertAfter('selector')	P.ej. $('<li>Elemento intermedio</li>').insertBefore($('.nuevo'));
		$('selector').remove(), .replaceWith(elem)
		$('selector').clone() Devuelve copia recursiva de los descencientes
		$('selector').is(’:cond') Comprueba si el elemento está ':checked', ':selected', ':enabled', ':disabled'	
		val([val]) Devuelve o pone el valor (value) del elemento: para textboxes el contenido, para botones la etiqueta, para menús el texto de la opción seleccionada
		.addClass('cssClass'), .removeClass('cssClass'), hasClass()
		.css('propiedad') Devuelve propiedad CSS del elemento
		.css({'propiedad':'valor',…}) Pone propiedades CSS al elemento.
	Animaciones
		.hide([duracion][,callback]),
		.show([duracion][,callback]) Muestra/oculta el elemento, tardando duracion ('fast', 'slow' o milisegundos), y cuando termina llama a callback
		.slideUp([duracion][,callback]), Desaparece como persiana
		.slideDown([duracion][,callback]),
		.slideToggle([duracion][,callback])
		.fadeOut([duracion][,callback]), Desaparece haciéndose transparente
		.fadeIn([duracion][,callback])
		.fadeTo(duracion, target, callback)
	Enviar los datos de un formulario
		$('selector').submit();	
	Eventos 
	-aplicables a cualquier elemento:
		click, dblclick, mousedown/mouseup, mouseenter/mouseleave
		keypress (event.which devuelve el código ASCII dentro del manejador)
		focus/blur (el elemento obtiene/pierde el foco de entrada)
		focusin/focusout (el padre del elemento obtiene/pierde el foco)	
		
		$("#miBoton").click( validar);						||	$("#miBoton").click( function validar(){	
		function validar(){									||
			if( $("#miTexto").val().length < 10 ) {			||		if( $("#miTexto").val().length < 10 ) 
			alert("Error");									||			alert("Error");	
		} ;													||	});
	-(forms, checkboxes, radio buttons, text, menús):
		change
		select Seleccionar un texto (input y textarea)(event.which devuelve el texto seleccionado dentro del manejador)
		submit (disparado cuando se envía un formulario	
	Metodos núceos de JQuery
		$.trim Remueve los espacios en blanco del principio y final.
	
	JQuery UI: Una de la extensiones más usadas de JQuery
		http://www.asp.net/ajax/cdn/jqueryui/cdnjqueryui1114 : lista de enlaces, debe ir despues de JQuery en head del html
		<script src="http://code.jquery.com/ui/1.11.4/jqueryui.js"></script>
		$.datepicker....
	
	Notas: se pueden llamar en cascada P.ej. $('#content').find('h3').eq(2).html('nuevo texto para el tercer elemento h3');
		
JSON (JavaScript Object Notation): un formato de texto ligero para el intercambio de datos
	En la práctica, las consideraciones de seguridad por lo general recomiendan no usar eval sobre datos crudos y debería usarse un 
	analizador JavaScript distinto para garantizar la seguridad. El analizador proporcionado por JSON.org usa eval() en su función de 
	análisis, protegiéndola con una expresión regular de forma que la función sólo ve expresiones seguras.
	
XML (eXtensible Markup Language ):  un estándar para el intercambio de información estructurada entre diferentes plataformas.

AJAX (Asynchronous JavaScript And XML)
	xhr permite realizar peticiones HTTP al servidor de forma asíncrona: la llamada retorna antes de obtenerse la respuesta del servidor.
	Con JQuery:
		$.ajax() Para realizar peticiones genéricas. Hay que especificar los detalles.
			$.ajax( { type:"GET", URL:"https://....", headers:{...}, 
				success:function(data){
					for(var x of data.value){
						var noticia= $("<div class='noticia'></div>");
						var noticiaImagen= $("<div class='noticia-imagen'></div>");
						var noticiaContenido= $("<div class='noticia-contenido'></div>");
						var imagen= $("img src="+x.img.thumbnail.contentUrl+"/>");
						var titulo= $("<h2>"+x.name+"</h2>");
						var descripcion= $("<p>"+x.description+"</p>");
						
						noticiaContenido.append(titulo,descripcion);
						noticiaImagen.append(imagen);
						noticia.append(noticiaImagen,noticiaContenido);
						
						$("alista-noticias").append(noticia);
						
					}
				}, error:function(data){...} });	//Success: si sale bien
			
			<html>
			...
			<div id="lista_noticias" class="lista">
				<div id="noticia">
					<div id="noticia-imagen">
						<img class="noticia-img">
					</div>
					<div id="noticia-contenido">
						<p id="", class=""></p>
						
					</div>
				</div>
			</div>	
			...
			</html>
			
		$.get, $.post, $.getJSON, encodeURI(String), $.param(objeto), $(‘selector’).serialize(), JSON.Stringify(objeto)
		
***************************************************************************************************************************************************		
AngularJS:  es un framework de JavaScript de código abierto, mantenido por Google, que se utiliza para crear y mantener aplicaciones web de una sola página.
	Modelo Vista Controlador (MVC), el desarrollo y las pruebas sean más fáciles.
	AngularJS se puede combinar con el entorno en tiempo de ejecución Node.js, el framework para servidor Express.js y la base de datos MongoDB para formar el conjunto MEAN.
	Angular1 trabaja con JavaScript puro, y el 2 con Typescript
	
	en .HTML:
	<html ng-app="app">
	...
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>
	..
	<body ng-controller="mainController">
		{{2+3}}	<!-- muestra 5 en el navegador -->
		{{atributo1}}
		{{atributo2}}
	</body>
	</html>	

	
	En .js:
		var app=angular.module("App",[]);
		app.controller("mainController",function($scope){
			$scope.atributo1=...
			$scope.atributo2=...
			$http.get("un enlace")
				.success(function(data){
					
				});
				.error();
			...
		});

	En .css:	
	.lista-usuarios{
		...
	}
	.usuario{
		...
	}



